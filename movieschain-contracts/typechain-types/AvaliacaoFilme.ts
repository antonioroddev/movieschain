/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface AvaliacaoFilmeInterface extends Interface {
  getFunction(
    nameOrSignature: "avaliacoes" | "avaliar" | "getAvaliacao"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Avaliado"): EventFragment;

  encodeFunctionData(
    functionFragment: "avaliacoes",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "avaliar",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAvaliacao",
    values: [BigNumberish, AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "avaliacoes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "avaliar", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAvaliacao",
    data: BytesLike
  ): Result;
}

export namespace AvaliadoEvent {
  export type InputTuple = [
    filmeId: BigNumberish,
    autor: AddressLike,
    nota: BigNumberish,
    comentario: string
  ];
  export type OutputTuple = [
    filmeId: bigint,
    autor: string,
    nota: bigint,
    comentario: string
  ];
  export interface OutputObject {
    filmeId: bigint;
    autor: string;
    nota: bigint;
    comentario: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AvaliacaoFilme extends BaseContract {
  connect(runner?: ContractRunner | null): AvaliacaoFilme;
  waitForDeployment(): Promise<this>;

  interface: AvaliacaoFilmeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  avaliacoes: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [
      [bigint, string, string] & {
        nota: bigint;
        comentario: string;
        autor: string;
      }
    ],
    "view"
  >;

  avaliar: TypedContractMethod<
    [filmeId: BigNumberish, nota: BigNumberish, comentario: string],
    [void],
    "nonpayable"
  >;

  getAvaliacao: TypedContractMethod<
    [filmeId: BigNumberish, autor: AddressLike],
    [[bigint, string]],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "avaliacoes"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [
      [bigint, string, string] & {
        nota: bigint;
        comentario: string;
        autor: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "avaliar"
  ): TypedContractMethod<
    [filmeId: BigNumberish, nota: BigNumberish, comentario: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAvaliacao"
  ): TypedContractMethod<
    [filmeId: BigNumberish, autor: AddressLike],
    [[bigint, string]],
    "view"
  >;

  getEvent(
    key: "Avaliado"
  ): TypedContractEvent<
    AvaliadoEvent.InputTuple,
    AvaliadoEvent.OutputTuple,
    AvaliadoEvent.OutputObject
  >;

  filters: {
    "Avaliado(uint256,address,uint8,string)": TypedContractEvent<
      AvaliadoEvent.InputTuple,
      AvaliadoEvent.OutputTuple,
      AvaliadoEvent.OutputObject
    >;
    Avaliado: TypedContractEvent<
      AvaliadoEvent.InputTuple,
      AvaliadoEvent.OutputTuple,
      AvaliadoEvent.OutputObject
    >;
  };
}
